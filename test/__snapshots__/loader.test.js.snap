// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loader can process basic input 1`] = `"class Foo {}"`;

exports[`loader can process without options 1`] = `"class Foo {}"`;

exports[`loader full components multiple template methods 1`] = `
"
import format from 'date-fns/format';
import {PolymerElement, html} from '@polymer/polymer/polymer-element.js';  

class MyElement extends PolymerElement {
  static get is() { return 'my-element'; }
  static get properties() {
    return {
      today: {
        type: String,
        value: function() {
          return format(new Date(), 'MM/DD/YYYY');
        }
      }
    }
  }
  static get styles() {
    return html\`<style>h1{background-color:pink}</style>\`;
  }
  static get template() {
    return html\`\${MyElement.styles} <h1> Hello, World! It's [[today]]. </h1>\`;
  }
}

window.customElements.define(MyElement.is, MyElement);
"
`;

exports[`loader html-loader html is minimized when option is set 1`] = `
"import {PolymerElement, html} from \\"@polymer/polymer/polymer-element.js\\";

class FooElement extends PolymerElement {
  static get is() { return \\"foo-element\\"; }
  static get template() { return html\`<div id=\\"foo\\"> some text </div>\`; }
}
customElements.define(FooElement.is, FooElement);
"
`;

exports[`loader html-loader image sources are replaced with require calls 1`] = `
"import {PolymerElement, html} from \\"@polymer/polymer/polymer-element.js\\";

class FooElement extends PolymerElement {
  static get is() { return \\"foo-element\\"; }
  static get template() { return html\`<img src=\\"\${__createTemplateFromString(require('./foo.jpg'))}\\" />\`; }
}
customElements.define(FooElement.is, FooElement);

function __createTemplateFromString(a) {
  const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));
  template.innerHTML = a;
  return template;
}
"
`;
